<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seer's]]></title>
  <link href="http://blog.0x08.net/atom.xml" rel="self"/>
  <link href="http://blog.0x08.net/"/>
  <updated>2014-03-19T14:36:46+08:00</updated>
  <id>http://blog.0x08.net/</id>
  <author>
    <name><![CDATA[Seer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux进程控制系统调用]]></title>
    <link href="http://blog.0x08.net/blog/2014/03/12/linuxjin-cheng-kong-zhi-xi-tong-diao-yong/"/>
    <updated>2014-03-12T02:00:44+08:00</updated>
    <id>http://blog.0x08.net/blog/2014/03/12/linuxjin-cheng-kong-zhi-xi-tong-diao-yong</id>
    <content type="html"><![CDATA[<h3>0x01</h3>

<p>编例实现创建n个子进程P1，P2，…，Pn,其中，各进程之间的关系是：P1是调用进程的子进程，P(k+1)是Pk的子进程。请打印各进程本身的进程号、父进程号，子进程号。参考运行结果如下。<br/>
要求:</p>

<ul>
<li>每个父进程都要等待子进程退出后才能退出；</li>
<li>n通过命令行参数传入；</li>
<li>附上源代码截图和运行结果截图。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">childpid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span><span class="o">!=</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage :%s  processes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">childpid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">childpid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;P%d :  Process Id:%d, Parent Id:%d, childid:%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getpid</span><span class="p">(),</span><span class="n">getppid</span><span class="p">(),</span><span class="n">childpid</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">childpid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">waitpid</span><span class="p">(</span><span class="n">childpid</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//   printf(&quot; Process with PID = %d terminates \n &quot;,getpid() ); // Test code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>0x02</h3>

<p>编例实现创建n个子进程P1，P2，…，Pn,其中，各进程之间的关系是：P1，…,Pn都是调用进程的子进程。请打印各进程本身的进程号、父进程号，子进程号。参考运行结果如下。<br/>
要求：</p>

<ul>
<li>每个父进程都要等待子进程退出后才能退出；</li>
<li>n通过命令行参数传入；</li>
<li>附上源代码截图和运行结果截图.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#define MAXLEN 1000</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">childpid</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">,</span><span class="n">CPID</span><span class="p">[</span><span class="n">MAXLEN</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">argc</span><span class="o">!=</span><span class="mi">2</span> <span class="p">){</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage :%s  processes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">childpid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">CPID</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">childpid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">childpid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;P%d :  Process Id:%d, Parent Id:%d, childid:%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getpid</span><span class="p">(),</span><span class="n">getppid</span><span class="p">(),</span><span class="n">childpid</span> <span class="p">);</span>        
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">childpid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">waitpid</span><span class="p">(</span><span class="n">CPID</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;P0 :  Process Id:%d, Parent Id:%d, childid: &quot;</span><span class="p">,</span><span class="n">getpid</span><span class="p">(),</span><span class="n">getppid</span><span class="p">());</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span><span class="n">CPID</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>    
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>  
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>0x03</h3>

<p>编例实现创建n=2d-2个子进程P1，P2，…，Pn,其中，d是树的深度且d>=1, P1和P2是调用进程的子进程，P3和P4是P1的子进程，P5和P6是P2的子进程。也就是各进程之间的关系是：Pi是P2i+1和P2i+2的父进程，也是组成二叉树的关系，如下图所示。对于不是叶子的进程，将其ID和父进程ID打印出来。参考运行结果如下。 <br/>
要求：</p>

<ul>
<li>每个父进程都要等待子进程退出后才能退出；</li>
<li>d通过命令行参数传入；</li>
<li>附上源代码截图和运行结果截图。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">Lchildpid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">Rchildpid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">depth</span><span class="p">,</span><span class="n">no</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span><span class="o">!=</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage :%s  processes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">depth</span> <span class="o">=</span> <span class="n">atoi</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">Lchildpid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>      <span class="n">Lchildpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Lchildpid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">no</span> <span class="o">=</span> <span class="n">no</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">Rchildpid</span> <span class="o">=</span> <span class="n">Lchildpid</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">Rchildpid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>      <span class="n">Rchildpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">Rchildpid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">no</span> <span class="o">=</span> <span class="n">no</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>          <span class="n">Rchildpid</span> <span class="o">=</span> <span class="n">Lchildpid</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">Lchildpid</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">Rchildpid</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">Rchildpid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>      <span class="n">waitpid</span><span class="p">(</span><span class="n">Rchildpid</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">waitpid</span><span class="p">(</span><span class="n">Lchildpid</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;P%d :  Process Id:%d, Parent Id:%d, Left Childid:%d, Right Childid:%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">no</span><span class="p">,</span><span class="n">getpid</span><span class="p">(),</span><span class="n">getppid</span><span class="p">(),</span><span class="n">Lchildpid</span><span class="p">,</span> <span class="n">Rchildpid</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>0x04</h3>

<p>实现Linux守护进程的创建，如可以自己添加个性化功能（自行发挥，如写文件。。。等）。</p>

<pre><code>I will finish it later :)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的开始]]></title>
    <link href="http://blog.0x08.net/blog/2014/03/11/first-paper/"/>
    <updated>2014-03-11T02:03:24+08:00</updated>
    <id>http://blog.0x08.net/blog/2014/03/11/first-paper</id>
    <content type="html"><![CDATA[<p>前天把博客数据库Drop掉，甚是心痛，实在不知道我当时怎么想得，居然这样去命名&hellip;..</p>

<p><img src="http://wenwen.soso.com/p/20110331/20110331151831-394079716.jpg"></p>

<p>手贱Drop Database 之后，我就转移到这吧。从此『妈妈再也不用担心我没有备份数据库了』</p>

<p>其实我还是挺怀念之前的博客的，记录了我点点滴滴,还有那一篇篇烂尾的文章各种private的笔记和那整理到一半的bctf思路&hellip;&hellip;</p>

<hr />

<p>  好吧，往事不堪回首，大侠还是要重新来过，这里，会是一个新的开始。</p>

<hr />
]]></content>
  </entry>
  
</feed>
